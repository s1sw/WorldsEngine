sources = [
    'spirv_reflect.c',
    'mikktspace.c',
    'weldmesh.cpp',
    'stb_vorbis.c',
    'ImGuizmo.cpp',
    'Fatal.cpp',
    'IOUtil.cpp',
    'JobSystem.cpp',
    'RenderGraph.cpp',
    'ShaderMetadata.cpp',
    'imgui_impl_sdl.cpp',
    'imgui_impl_vulkan.cpp',
    'imgui_stdlib.cpp',
    'physfs.cpp',
    'vkswapchain.cpp',
    'AssetDB.cpp',
    'Assets.cpp',
    'Audio.cpp',
    'BRDFLUTRenderer.cpp',
    'Console.cpp',
    'CubemapConvoluter.cpp',
    'CubemapLoader.cpp',
    'DefaultUITheme.cpp',
    'EarlySDLUtil.cpp',
    'Editor.cpp',
    'Engine.cpp',
    'EntityEditor.cpp',
    'EntityList.cpp',
    'GameControls.cpp',
    'GuiUtil.cpp',
    'ImGuiRenderPass.cpp',
    'Input.cpp',
    'LuaVM.cpp',
    'MaterialSlots.cpp',
    'ObjModelLoader.cpp',
    'OpenVRInterface.cpp',
    'Physics.cpp',
    'PolyRenderPass.cpp',
    'RichPresence.cpp',
    'SceneSerialization.cpp',
    'SceneSerializationFunctions.cpp',
    'ShadowmapRenderPass.cpp',
    'SourceModelLoader.cpp',
    'SplashWindow.cpp',
    'StyleEditor.cpp',
    'TextureLoader.cpp',
    'TonemapRenderPass.cpp',
    'VKImGUIUtil.cpp',
    'VTFLoader.cpp',
    'WMDLLoader.cpp',
    'imgui.cpp',
    'imgui_demo.cpp',
    'imgui_draw.cpp',
    'imgui_widgets.cpp',
    'vkrender.cpp',
    'tiny_obj_loader.cc',
    'ImGuizmo.h',
    'imgui_impl_sdl.h',
    'tiny_obj_loader.h',
    'imgui_impl_vulkan.h',
    'imgui_stdlib.h',
    'mikktspace.h',
    'spirv_reflect.h',
    'weldmesh.h',
    'IconsFontAwesome5.h',
    'IconsFontaudio.h',
    'imconfig.h',
    'imgui.h',
    'imgui_internal.h',
    'imstb_rectpack.h',
    'imstb_textedit.h',
    'imstb_truetype.h',
    'GlmStreamOps.hpp',
    'PCH.hpp',
    'RendererComponents.hpp',
    'cxxopts.hpp',
    'physfs.hpp',
    'AssetDB.hpp',
    'ComponentMetadata.hpp',
    'CubemapLoader.hpp',
    'Fatal.hpp',
    'GuiUtil.hpp',
    'IOUtil.hpp',
    'Log.hpp',
    'LogCategories.hpp',
    'LuaVM.hpp',
    'MatUtil.hpp',
    'RenderGraph.hpp',
    'Result.hpp',
    'SceneSerialization.hpp',
    'ShaderMetadata.hpp',
    'TimingUtil.hpp',
    'Transform.hpp',
    'Audio.hpp',
    'Camera.hpp',
    'Console.hpp',
    'CreateModelObject.hpp',
    'EarlySDLUtil.hpp',
    'Editor.hpp',
    'EditorWindows.hpp',
    'Engine.hpp',
    'Frustum.hpp',
    'IGameEventHandler.hpp',
    'ISystem.hpp',
    'IVRInterface.hpp',
    'Input.hpp',
    'JobSystem.hpp',
    'NameComponent.hpp',
    'ObjModelLoader.hpp',
    'OpenVRInterface.hpp',
    'PackedMaterial.hpp',
    'Physics.hpp',
    'PhysicsActor.hpp',
    'Render.hpp',
    'RenderPasses.hpp',
    'ResourceSlots.hpp',
    'RichPresence.hpp',
    'SceneSerializationFuncs.hpp',
    'SourceModelLoader.hpp',
    'SplashWindow.hpp',
    'TextureLoader.hpp',
    'VKImGUIUtil.hpp',
    'WMDLLoader.hpp'
]

cc = meson.get_compiler('cpp')

physx_lib_dir = meson.project_source_root() + '/External/Lib/linux64dbg'

if get_option('buildtype').startswith('release')
  physx_lib_dir = meson.project_source_root() + '/External/Lib/linux64rel'
endif

physx_deps = [
    cc.find_library('PhysXCharacterKinematic_static_64', dirs: physx_lib_dir),
    cc.find_library('PhysXCommon_static_64', dirs: physx_lib_dir),
    cc.find_library('PhysXCooking_static_64', dirs: physx_lib_dir),
    cc.find_library('PhysXExtensions_static_64', dirs: physx_lib_dir),
    cc.find_library('PhysXFoundation_static_64', dirs: physx_lib_dir),
    cc.find_library('PhysXPvdSDK_static_64', dirs: physx_lib_dir),
    cc.find_library('PhysX_static_64', dirs: physx_lib_dir),
    cc.find_library('PhysXVehicle_static_64', dirs: physx_lib_dir),
    cc.find_library('SampleBase_static_64', dirs: physx_lib_dir),
    cc.find_library('SampleFramework_static_64', dirs: physx_lib_dir),
    cc.find_library('SamplePlatform_static_64', dirs: physx_lib_dir),
    cc.find_library('SampleRenderer_static_64', dirs: physx_lib_dir),
    cc.find_library('SamplesToolkit_static_64', dirs: physx_lib_dir),
    cc.find_library('SnippetRender_static_64', dirs: physx_lib_dir),
    cc.find_library('SnippetUtils_static_64', dirs: physx_lib_dir)
]

worlds_inc = include_directories('.')
tracy_inc = include_directories('./tracy/')
physfs_dep = dependency('physfs')
vk_dep = dependency('vulkan')
lua_dep = dependency('lua')

dl_dep = cc.find_library('dl', required : false)
openvr_dep = cc.find_library('openvr_api')

worlds = static_library('worlds', sources, include_directories: [extern_include_dir, physx_include_dir, tracy_inc], dependencies: [vk_dep, physfs_dep, sdl2_dep, physx_deps, dl_dep, openvr_dep, lua_dep, wmdl_dep])
worlds_dep = declare_dependency(include_directories: worlds_inc, link_with: worlds)
